import { jest } from '@jest/globals';

/**
 * Enhanced mock OpenAI that provides different responses
 * based on the file type being tested.
 */

const mockOpenAI = {
  chat: {
    completions: {
      create: jest.fn().mockImplementation((params) => {
        // Safely extract message content without destructuring
        const messages = params?.messages || [];
        const userMessage = messages.find(m => m.role === 'user')?.content || '';
        const fileContent = typeof userMessage === 'string' ? userMessage : '';
        
        // Check file type to determine appropriate test template
        let testContent = '';
        
        if (fileContent.includes('React') || fileContent.includes('useState') || fileContent.includes('JSX')) {
          testContent = generateReactTests();
        } else if (fileContent.includes('Express') || fileContent.includes('app.get(') || fileContent.includes('router.post')) {
          testContent = generateExpressTests();
        } else {
          testContent = generateGenericTests();
        }

        return Promise.resolve({
          choices: [
            {
              message: {
                content: testContent
              }
            }
          ]
        });
      })
    }
  }
};

function generateReactTests() {
  return `
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Component } from './Component';

describe('Component', () => {
  test('renders correctly', () => {
    render(<Component />);
    expect(screen.getByTestId('component')).toBeInTheDocument();
  });
});
`;
}

function generateExpressTests() {
  return `
import request from 'supertest';
import app from './app';

describe('API endpoints', () => {
  test('GET / returns 200', async () => {
    const response = await request(app).get('/');
    expect(response.status).toBe(200);
  });
});
`;
}

function generateGenericTests() {
  return `
import { functionName } from './module';

describe('functionName', () => {
  test('returns expected result', () => {
    const result = functionName();
    expect(result).toBeDefined();
  });
});
`;
}

export default jest.fn().mockImplementation(() => mockOpenAI);
